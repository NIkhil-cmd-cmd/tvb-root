<Lems description="2D model describing the Ott-Antonsen reduction of infinitely all-to-all coupled QIF neurons (Theta-neurons). Montbrio">

    <ComponentType name="rateml_model">

        <!-- Parameters with max will be assumed to be swept. sweep data will be matched by order of entry -->
        <!--  global_speed needs either to be swept or set as a single variable -->
        <Parameter name="global_speed" minval='1.0' maxval='2.0' dimension="" description="parametersweep"/>
        <Parameter name="global_coupling" minval='1.0' maxval='2.0' dimension="" description="parametersweep"/>
        <!-- Parameters with only min will be initial value -->
        <Parameter name="tau" dimension="" minval="1.0" description="???"/>
        <Parameter name="I" dimension="" minval="0.0" description="???"/>
        <Parameter name="Delta" dimension="" minval="0.7" description="Vertical shift of the configurable nullcline."/>
        <Parameter name="J" dimension="" minval="14.5" description="Constant parameter to scale the rate of feedback from the slow variable to the firing rate variable."/>
        <Parameter name="eta" dimension="" minval="-4.6" description="Constant parameter to scale the rate of feedback from the firing rate variable to itself"/>
        <Parameter name="Gamma" dimension="" minval="5.0" description="Derived from eterogeneous currents and synaptic weights (see Montbrio p.12)."/>
        <Parameter name="cr" dimension="" minval="1.0" description="It is the weight on Coupling through variable r."/>
        <Parameter name="cv" dimension="" minval="1.0" description="It is the weight on Coupling through variable V."/>
        <!-- Nsig is special. Noise attenuation factor. If set to 0, no stochastic integration -->
        <Parameter name="nsig" minval="0.5" dimension="" description="noiseparameter"/>
        <!-- Coupling parameters are special. Used for coupling when description is "couplingfunction"
         for the accumulation of nodes interaction use hardcoded value sigma, maxval sets the state to which
         the coupling should apply, accumulated results are hardcoded in variable sigmaN -->
        <Parameter name="cpop0" dimension="" minval="sigma0" maxval="0" description="couplingfunction"/>
        <Parameter name="cpop1" dimension="" minval="sigma1" maxval="1" description="couplingfunction"/>


        <!-- Exposures are used for observables, for the name enter variable to be observed (usually states)
        and for dimension enter the reduction functionality. Will be represented as variables_of_interest.
        Choices and default list with a (,) separator-->
        <Exposure name="r" minval="0" maxval="INF" dimension=""/>
        <Exposure name="V" dimension=""/>

        <Dynamics>
            <!-- "State variable ranges [lo, hi]" values are entered with keyword "default" -->
            <!-- For each state variable a set of boundaries can be added to encompass the boundaries of the dynamic range -->
            <!-- Leave empty "" for no boundaries. Set None for one-sided boundaries, i.e. "1.0, None" -->

            <!-- Python -->
            <StateVariable name="r" minval="0.0" maxval="-2.0" dimension=""/>
            <StateVariable name="V" minval="-2.0" maxval="1.5" dimension=""/>

            <!-- Derived variables can be used to simplify the time derivatives, enter the local coupling formulas or any formula -->
            <!-- syntax: [name]=[expression] -->
            <!-- Define for ex. global and local coupling: c_0 = coupling[0, ] and lc_0 = local_coupling -->
<!--            <DerivedVariable name="Coupling_global" value="alpha * c_pop1"/>-->
<!--            <DerivedVariable name="Coupling_local" value="(1-alpha) * r"/>-->
<!--            <DerivedVariable name="Coupling_Term_r" value="Coupling_global + Coupling_local"/>-->

            <TimeDerivative variable="dr" value="1/tau * (Delta / (pi * tau) + 2 * V * r)"/>
            <TimeDerivative variable="dV" value="1/tau * ({V^2} - {pi^2} * {tau^2} * {r^2} + eta + J * tau * r + I + cr * (cpop0 * global_coupling))"/>

        </Dynamics>

    </ComponentType>

</Lems>